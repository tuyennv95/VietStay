{"ast":null,"code":"/* global btoa */\n(function (root) {\n  let base64; // This function's sole purpose is to help us ignore lone surrogates so that\n  // malformed strings don't throw in the browser while being processed\n  // permissively in Node.js. If we didn't care about parity, we could get rid\n  // of it.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n  function getWholeCharAndI(str, i) {\n    const code = str.charCodeAt(i); // This is a coherence check. `code` should never be `NaN`.\n\n    /* istanbul ignore if */\n\n    if (isNaN(code)) {\n      throw new RangeError('Index ' + i + ' out of range for string \"' + str + '\"; please open an issue at https://github.com/Trott/slug/issues/new');\n    }\n\n    if (code < 0xD800 || code > 0xDFFF) {\n      return [str.charAt(i), i]; // Non-surrogate character, keeping 'i' the same\n    } // High surrogate\n\n\n    if (code >= 0xD800 && code <= 0xDBFF) {\n      if (str.length <= i + 1) {\n        // High surrogate without following low surrogate\n        return [' ', i];\n      }\n\n      const next = str.charCodeAt(i + 1);\n\n      if (next < 0xDC00 || next > 0xDFFF) {\n        // High surrogate without following low surrogate\n        return [' ', i];\n      }\n\n      return [str.charAt(i) + str.charAt(i + 1), i + 1];\n    } // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n\n\n    if (i === 0) {\n      // Low surrogate without preceding high surrogate\n      return [' ', i];\n    }\n\n    const prev = str.charCodeAt(i - 1);\n    /* istanbul ignore else */\n\n    if (prev < 0xD800 || prev > 0xDBFF) {\n      // Low surrogate without preceding high surrogate\n      return [' ', i];\n    }\n    /* istanbul ignore next */\n\n\n    throw new Error('String \"' + str + '\" reaches code believed to be unreachable; please open an issue at https://github.com/Trott/slug/issues/new');\n  }\n\n  if (typeof window !== 'undefined') {\n    if (window.btoa) {\n      base64 = function (input) {\n        return btoa(unescape(encodeURIComponent(input)));\n      };\n    } else {\n      // Polyfill for environments that don't have btoa or Buffer class (notably, React Native).\n      // Based on https://github.com/davidchambers/Base64.js/blob/a121f75bb10c8dd5d557886c4b1069b31258d230/base64.js\n      base64 = function (input) {\n        const str = unescape(encodeURIComponent(input + ''));\n        let output = '';\n\n        for (let block, charCode, idx = 0, map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='; str.charAt(idx | 0) || (map = '=', idx % 1); output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n          charCode = str.charCodeAt(idx += 3 / 4); // TODO: The if condition may be guaranteed to be false. Verify and\n          // remove or otherwise write a test to cover it.\n\n          /* istanbul ignore if */\n\n          if (charCode > 0xFF) {\n            throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n          }\n\n          block = block << 8 | charCode;\n        }\n\n        return output;\n      };\n    }\n  } else {\n    base64 = function (input) {\n      return Buffer.from(input).toString('base64');\n    };\n  } // IE11 doesn't have Object.assign(), hence this MDN-supplied polyfill.\n\n  /* istanbul ignore if */\n\n\n  if (typeof Object.assign !== 'function') {\n    // Must be writable: true, enumerable: false, configurable: true\n    Object.defineProperty(Object, 'assign', {\n      value: function assign(target, varArgs) {\n        // .length of function is 2\n        'use strict';\n\n        if (target === null || target === undefined) {\n          throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        const to = Object(target);\n\n        for (let index = 1; index < arguments.length; index++) {\n          const nextSource = arguments[index];\n\n          if (nextSource !== null && nextSource !== undefined) {\n            // eslint-disable-next-line no-var\n            for (var nextKey in nextSource) {\n              // Avoid bugs when hasOwnProperty is shadowed\n              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                to[nextKey] = nextSource[nextKey];\n              }\n            }\n          }\n        }\n\n        return to;\n      },\n      writable: true,\n      configurable: true\n    });\n  }\n\n  function slug(string, opts) {\n    let result = slugify(string, opts); // If output is an empty string, try slug for base64 of string.\n\n    if (result === '') {\n      // Get rid of lone surrogates.\n      let input = '';\n\n      for (let i = 0; i < string.length; i++) {\n        const charAndI = getWholeCharAndI(string, i);\n        i = charAndI[1];\n        input += charAndI[0];\n      }\n\n      result = slugify(base64(input), opts);\n    }\n\n    return result;\n  }\n\n  const locales = {\n    // http://www.eki.ee/wgrs/rom1_bg.pdf\n    bg: {\n      Й: 'Y',\n      й: 'y',\n      X: 'H',\n      x: 'h',\n      Ц: 'Ts',\n      ц: 'ts',\n      Щ: 'Sht',\n      щ: 'sht',\n      Ъ: 'A',\n      ъ: 'a',\n      Ь: 'Y',\n      ь: 'y'\n    },\n    // Need a reference URL for German, although this is pretty well-known.\n    de: {\n      Ä: 'AE',\n      ä: 'ae',\n      Ö: 'OE',\n      ö: 'oe',\n      Ü: 'UE',\n      ü: 'ue'\n    },\n    // Need a reference URL for Serbian.\n    sr: {\n      đ: 'dj',\n      Đ: 'DJ'\n    }\n  };\n\n  function slugify(string, opts) {\n    if (typeof string !== 'string') {\n      throw new Error('slug() requires a string argument, received ' + typeof string);\n    }\n\n    if (typeof opts === 'string') {\n      opts = {\n        replacement: opts\n      };\n    }\n\n    opts = opts ? Object.assign({}, opts) : {};\n    opts.mode = opts.mode || slug.defaults.mode;\n    const defaults = slug.defaults.modes[opts.mode];\n    const keys = ['replacement', 'multicharmap', 'charmap', 'remove', 'lower'];\n\n    for (let key, i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      opts[key] = key in opts ? opts[key] : defaults[key];\n    }\n\n    const localeMap = locales[opts.locale] || {};\n    let lengths = []; // \"let\" instead of \"const\" in next line is for IE11 compatibilty\n\n    for (let key in opts.multicharmap) {\n      // eslint-disable-line prefer-const\n      if (!Object.prototype.hasOwnProperty.call(opts.multicharmap, key)) {\n        continue;\n      }\n\n      const len = key.length;\n\n      if (lengths.indexOf(len) === -1) {\n        lengths.push(len);\n      }\n    } // We want to match the longest string if there are multiple matches, so\n    // sort lengths in descending order.\n\n\n    lengths = lengths.sort(function (a, b) {\n      return b - a;\n    });\n    let result = '';\n\n    for (let char, i = 0, l = string.length; i < l; i++) {\n      char = string[i];\n      let matchedMultichar = false;\n\n      for (let j = 0; j < lengths.length; j++) {\n        const len = lengths[j];\n        const str = string.substr(i, len);\n\n        if (opts.multicharmap[str]) {\n          i += len - 1;\n          char = opts.multicharmap[str];\n          matchedMultichar = true;\n          break;\n        }\n      }\n\n      if (!matchedMultichar) {\n        if (localeMap[char]) {\n          char = localeMap[char];\n        } else if (opts.charmap[char]) {\n          char = opts.charmap[char];\n        }\n      } // next line preserves the replacement character in case it is included in allowedChars\n\n\n      char = char.replace(opts.replacement, ' ');\n      result += char;\n    }\n\n    const allowedChars = opts.mode === 'rfc3986' ? /[^\\w\\s\\-.~]/g : /[^A-Za-z0-9\\s]/g;\n    result = result.replace(allowedChars, ''); // allowed\n\n    if (opts.remove) {\n      result = result.replace(opts.remove, '');\n    }\n\n    result = result.trim();\n    result = result.replace(/[-\\s]+/g, opts.replacement); // convert spaces\n\n    result = result.replace(opts.replacement + '$', ''); // remove trailing separator\n\n    if (opts.lower) {\n      result = result.toLowerCase();\n    }\n\n    return result;\n  }\n\n  const initialMulticharmap = {\n    // multibyte devanagari characters (hindi, sanskrit, etc.)\n    फ़: 'Fi',\n    ग़: 'Ghi',\n    ख़: 'Khi',\n    क़: 'Qi',\n    ड़: 'ugDha',\n    ढ़: 'ugDhha',\n    य़: 'Yi',\n    ज़: 'Za',\n    // hebrew\n    // Refs: http://www.eki.ee/wgrs/rom1_he.pdf\n    // Refs: https://en.wikipedia.org/wiki/Niqqud\n    בִי: 'i',\n    בֵ: 'e',\n    בֵי: 'e',\n    בֶ: 'e',\n    בַ: 'a',\n    בָ: 'a',\n    בֹ: 'o',\n    וֹ: 'o',\n    בֻ: 'u',\n    וּ: 'u',\n    בּ: 'b',\n    כּ: 'k',\n    ךּ: 'k',\n    פּ: 'p',\n    שׁ: 'sh',\n    שׂ: 's',\n    בְ: 'e',\n    חֱ: 'e',\n    חֲ: 'a',\n    חֳ: 'o',\n    בִ: 'i'\n  }; // https://github.com/django/django/blob/master/django/contrib/admin/static/admin/js/urlify.js\n\n  const initialCharmap = {\n    // latin\n    À: 'A',\n    Á: 'A',\n    Â: 'A',\n    Ã: 'A',\n    Ä: 'A',\n    Å: 'A',\n    Æ: 'AE',\n    Ç: 'C',\n    È: 'E',\n    É: 'E',\n    Ê: 'E',\n    Ë: 'E',\n    Ì: 'I',\n    Í: 'I',\n    Î: 'I',\n    Ï: 'I',\n    Ð: 'D',\n    Ñ: 'N',\n    Ò: 'O',\n    Ó: 'O',\n    Ô: 'O',\n    Õ: 'O',\n    Ö: 'O',\n    Ő: 'O',\n    Ø: 'O',\n    Ō: 'O',\n    Ù: 'U',\n    Ú: 'U',\n    Û: 'U',\n    Ü: 'U',\n    Ű: 'U',\n    Ý: 'Y',\n    Þ: 'TH',\n    ß: 'ss',\n    à: 'a',\n    á: 'a',\n    â: 'a',\n    ã: 'a',\n    ä: 'a',\n    å: 'a',\n    æ: 'ae',\n    ç: 'c',\n    è: 'e',\n    é: 'e',\n    ê: 'e',\n    ë: 'e',\n    ì: 'i',\n    í: 'i',\n    î: 'i',\n    ï: 'i',\n    ð: 'd',\n    ñ: 'n',\n    ò: 'o',\n    ó: 'o',\n    ô: 'o',\n    õ: 'o',\n    ö: 'o',\n    ő: 'o',\n    ø: 'o',\n    ō: 'o',\n    Œ: 'OE',\n    œ: 'oe',\n    ù: 'u',\n    ú: 'u',\n    û: 'u',\n    ü: 'u',\n    ű: 'u',\n    ý: 'y',\n    þ: 'th',\n    ÿ: 'y',\n    ẞ: 'SS',\n    // greek\n    α: 'a',\n    β: 'b',\n    γ: 'g',\n    δ: 'd',\n    ε: 'e',\n    ζ: 'z',\n    η: 'h',\n    θ: '8',\n    ι: 'i',\n    κ: 'k',\n    λ: 'l',\n    μ: 'm',\n    ν: 'n',\n    ξ: '3',\n    ο: 'o',\n    π: 'p',\n    ρ: 'r',\n    σ: 's',\n    τ: 't',\n    υ: 'y',\n    φ: 'f',\n    χ: 'x',\n    ψ: 'ps',\n    ω: 'w',\n    ά: 'a',\n    έ: 'e',\n    ί: 'i',\n    ό: 'o',\n    ύ: 'y',\n    ή: 'h',\n    ώ: 'w',\n    ς: 's',\n    ϊ: 'i',\n    ΰ: 'y',\n    ϋ: 'y',\n    ΐ: 'i',\n    Α: 'A',\n    Β: 'B',\n    Γ: 'G',\n    Δ: 'D',\n    Ε: 'E',\n    Ζ: 'Z',\n    Η: 'H',\n    Θ: '8',\n    Ι: 'I',\n    Κ: 'K',\n    Λ: 'L',\n    Μ: 'M',\n    Ν: 'N',\n    Ξ: '3',\n    Ο: 'O',\n    Π: 'P',\n    Ρ: 'R',\n    Σ: 'S',\n    Τ: 'T',\n    Υ: 'Y',\n    Φ: 'F',\n    Χ: 'X',\n    Ψ: 'PS',\n    Ω: 'W',\n    Ά: 'A',\n    Έ: 'E',\n    Ί: 'I',\n    Ό: 'O',\n    Ύ: 'Y',\n    Ή: 'H',\n    Ώ: 'W',\n    Ϊ: 'I',\n    Ϋ: 'Y',\n    // turkish\n    ş: 's',\n    Ş: 'S',\n    ı: 'i',\n    İ: 'I',\n    ğ: 'g',\n    Ğ: 'G',\n    // russian\n    а: 'a',\n    б: 'b',\n    в: 'v',\n    г: 'g',\n    д: 'd',\n    е: 'e',\n    ё: 'yo',\n    ж: 'zh',\n    з: 'z',\n    и: 'i',\n    й: 'j',\n    к: 'k',\n    л: 'l',\n    м: 'm',\n    н: 'n',\n    о: 'o',\n    п: 'p',\n    р: 'r',\n    с: 's',\n    т: 't',\n    у: 'u',\n    ф: 'f',\n    х: 'h',\n    ц: 'c',\n    ч: 'ch',\n    ш: 'sh',\n    щ: 'sh',\n    ъ: 'u',\n    ы: 'y',\n    ь: '',\n    э: 'e',\n    ю: 'yu',\n    я: 'ya',\n    А: 'A',\n    Б: 'B',\n    В: 'V',\n    Г: 'G',\n    Д: 'D',\n    Е: 'E',\n    Ё: 'Yo',\n    Ж: 'Zh',\n    З: 'Z',\n    И: 'I',\n    Й: 'J',\n    К: 'K',\n    Л: 'L',\n    М: 'M',\n    Н: 'N',\n    О: 'O',\n    П: 'P',\n    Р: 'R',\n    С: 'S',\n    Т: 'T',\n    У: 'U',\n    Ф: 'F',\n    Х: 'H',\n    Ц: 'C',\n    Ч: 'Ch',\n    Ш: 'Sh',\n    Щ: 'Sh',\n    Ъ: 'U',\n    Ы: 'Y',\n    Ь: '',\n    Э: 'E',\n    Ю: 'Yu',\n    Я: 'Ya',\n    // ukranian\n    Є: 'Ye',\n    І: 'I',\n    Ї: 'Yi',\n    Ґ: 'G',\n    є: 'ye',\n    і: 'i',\n    ї: 'yi',\n    ґ: 'g',\n    // czech\n    č: 'c',\n    ď: 'd',\n    ě: 'e',\n    ň: 'n',\n    ř: 'r',\n    š: 's',\n    ť: 't',\n    ů: 'u',\n    ž: 'z',\n    Č: 'C',\n    Ď: 'D',\n    Ě: 'E',\n    Ň: 'N',\n    Ř: 'R',\n    Š: 'S',\n    Ť: 'T',\n    Ů: 'U',\n    Ž: 'Z',\n    // slovak\n    ľ: 'l',\n    ĺ: 'l',\n    ŕ: 'r',\n    Ľ: 'L',\n    Ĺ: 'L',\n    Ŕ: 'R',\n    // polish\n    ą: 'a',\n    ć: 'c',\n    ę: 'e',\n    ł: 'l',\n    ń: 'n',\n    ś: 's',\n    ź: 'z',\n    ż: 'z',\n    Ą: 'A',\n    Ć: 'C',\n    Ę: 'E',\n    Ł: 'L',\n    Ń: 'N',\n    Ś: 'S',\n    Ź: 'Z',\n    Ż: 'Z',\n    // latvian\n    ā: 'a',\n    ē: 'e',\n    ģ: 'g',\n    ī: 'i',\n    ķ: 'k',\n    ļ: 'l',\n    ņ: 'n',\n    ū: 'u',\n    Ā: 'A',\n    Ē: 'E',\n    Ģ: 'G',\n    Ī: 'I',\n    Ķ: 'K',\n    Ļ: 'L',\n    Ņ: 'N',\n    Ū: 'U',\n    // arabic\n    أ: 'a',\n    ب: 'b',\n    ت: 't',\n    ث: 'th',\n    ج: 'g',\n    ح: 'h',\n    خ: 'kh',\n    د: 'd',\n    ذ: 'th',\n    ر: 'r',\n    ز: 'z',\n    س: 's',\n    ش: 'sh',\n    ص: 's',\n    ض: 'd',\n    ط: 't',\n    ظ: 'th',\n    ع: 'aa',\n    غ: 'gh',\n    ف: 'f',\n    ق: 'k',\n    ك: 'k',\n    ل: 'l',\n    م: 'm',\n    ن: 'n',\n    ه: 'h',\n    و: 'o',\n    ي: 'y',\n    ء: 'aa',\n    ة: 'a',\n    // farsi\n    آ: 'a',\n    ا: 'a',\n    پ: 'p',\n    ژ: 'zh',\n    گ: 'g',\n    چ: 'ch',\n    ک: 'k',\n    ی: 'i',\n    // lithuanian\n    ė: 'e',\n    į: 'i',\n    ų: 'u',\n    Ė: 'E',\n    Į: 'I',\n    Ų: 'U',\n    // romanian\n    ț: 't',\n    Ț: 'T',\n    ţ: 't',\n    Ţ: 'T',\n    ș: 's',\n    Ș: 'S',\n    ă: 'a',\n    Ă: 'A',\n    // vietnamese\n    Ạ: 'A',\n    Ả: 'A',\n    Ầ: 'A',\n    Ấ: 'A',\n    Ậ: 'A',\n    Ẩ: 'A',\n    Ẫ: 'A',\n    Ằ: 'A',\n    Ắ: 'A',\n    Ặ: 'A',\n    Ẳ: 'A',\n    Ẵ: 'A',\n    Ẹ: 'E',\n    Ẻ: 'E',\n    Ẽ: 'E',\n    Ề: 'E',\n    Ế: 'E',\n    Ệ: 'E',\n    Ể: 'E',\n    Ễ: 'E',\n    Ị: 'I',\n    Ỉ: 'I',\n    Ĩ: 'I',\n    Ọ: 'O',\n    Ỏ: 'O',\n    Ồ: 'O',\n    Ố: 'O',\n    Ộ: 'O',\n    Ổ: 'O',\n    Ỗ: 'O',\n    Ơ: 'O',\n    Ờ: 'O',\n    Ớ: 'O',\n    Ợ: 'O',\n    Ở: 'O',\n    Ỡ: 'O',\n    Ụ: 'U',\n    Ủ: 'U',\n    Ũ: 'U',\n    Ư: 'U',\n    Ừ: 'U',\n    Ứ: 'U',\n    Ự: 'U',\n    Ử: 'U',\n    Ữ: 'U',\n    Ỳ: 'Y',\n    Ỵ: 'Y',\n    Ỷ: 'Y',\n    Ỹ: 'Y',\n    Đ: 'D',\n    ạ: 'a',\n    ả: 'a',\n    ầ: 'a',\n    ấ: 'a',\n    ậ: 'a',\n    ẩ: 'a',\n    ẫ: 'a',\n    ằ: 'a',\n    ắ: 'a',\n    ặ: 'a',\n    ẳ: 'a',\n    ẵ: 'a',\n    ẹ: 'e',\n    ẻ: 'e',\n    ẽ: 'e',\n    ề: 'e',\n    ế: 'e',\n    ệ: 'e',\n    ể: 'e',\n    ễ: 'e',\n    ị: 'i',\n    ỉ: 'i',\n    ĩ: 'i',\n    ọ: 'o',\n    ỏ: 'o',\n    ồ: 'o',\n    ố: 'o',\n    ộ: 'o',\n    ổ: 'o',\n    ỗ: 'o',\n    ơ: 'o',\n    ờ: 'o',\n    ớ: 'o',\n    ợ: 'o',\n    ở: 'o',\n    ỡ: 'o',\n    ụ: 'u',\n    ủ: 'u',\n    ũ: 'u',\n    ư: 'u',\n    ừ: 'u',\n    ứ: 'u',\n    ự: 'u',\n    ử: 'u',\n    ữ: 'u',\n    ỳ: 'y',\n    ỵ: 'y',\n    ỷ: 'y',\n    ỹ: 'y',\n    đ: 'd',\n    // kazakh\n    Ә: 'AE',\n    ә: 'ae',\n    Ғ: 'GH',\n    ғ: 'gh',\n    Қ: 'KH',\n    қ: 'kh',\n    Ң: 'NG',\n    ң: 'ng',\n    Ү: 'UE',\n    ү: 'ue',\n    Ұ: 'U',\n    ұ: 'u',\n    Һ: 'H',\n    һ: 'h',\n    Ө: 'OE',\n    ө: 'oe',\n    // serbian\n    ђ: 'dj',\n    ј: 'j',\n    љ: 'lj',\n    њ: 'nj',\n    ћ: 'c',\n    џ: 'dz',\n    Ђ: 'Dj',\n    Ј: 'j',\n    Љ: 'Lj',\n    Њ: 'Nj',\n    Ћ: 'C',\n    Џ: 'Dz',\n    ǌ: 'nj',\n    ǉ: 'lj',\n    ǋ: 'NJ',\n    ǈ: 'LJ',\n    // hindi\n    अ: 'a',\n    आ: 'aa',\n    ए: 'e',\n    ई: 'ii',\n    ऍ: 'ei',\n    ऎ: 'ae',\n    ऐ: 'ai',\n    इ: 'i',\n    ओ: 'o',\n    ऑ: 'oi',\n    ऒ: 'oii',\n    ऊ: 'uu',\n    औ: 'ou',\n    उ: 'u',\n    ब: 'B',\n    भ: 'Bha',\n    च: 'Ca',\n    छ: 'Chha',\n    ड: 'Da',\n    ढ: 'Dha',\n    फ: 'Fa',\n    ग: 'Ga',\n    घ: 'Gha',\n    ग़: 'Ghi',\n    ह: 'Ha',\n    ज: 'Ja',\n    झ: 'Jha',\n    क: 'Ka',\n    ख: 'Kha',\n    ख़: 'Khi',\n    ल: 'L',\n    ळ: 'Li',\n    ऌ: 'Li',\n    ऴ: 'Lii',\n    ॡ: 'Lii',\n    म: 'Ma',\n    न: 'Na',\n    ङ: 'Na',\n    ञ: 'Nia',\n    ण: 'Nae',\n    ऩ: 'Ni',\n    ॐ: 'oms',\n    प: 'Pa',\n    क़: 'Qi',\n    र: 'Ra',\n    ऋ: 'Ri',\n    ॠ: 'Ri',\n    ऱ: 'Ri',\n    स: 'Sa',\n    श: 'Sha',\n    ष: 'Shha',\n    ट: 'Ta',\n    त: 'Ta',\n    ठ: 'Tha',\n    द: 'Tha',\n    थ: 'Tha',\n    ध: 'Thha',\n    ड़: 'ugDha',\n    ढ़: 'ugDhha',\n    व: 'Va',\n    य: 'Ya',\n    य़: 'Yi',\n    ज़: 'Za',\n    // azerbaijani\n    ə: 'e',\n    Ə: 'E',\n    // georgian\n    ა: 'a',\n    ბ: 'b',\n    გ: 'g',\n    დ: 'd',\n    ე: 'e',\n    ვ: 'v',\n    ზ: 'z',\n    თ: 't',\n    ი: 'i',\n    კ: 'k',\n    ლ: 'l',\n    მ: 'm',\n    ნ: 'n',\n    ო: 'o',\n    პ: 'p',\n    ჟ: 'zh',\n    რ: 'r',\n    ს: 's',\n    ტ: 't',\n    უ: 'u',\n    ფ: 'p',\n    ქ: 'k',\n    ღ: 'gh',\n    ყ: 'q',\n    შ: 'sh',\n    ჩ: 'ch',\n    ც: 'ts',\n    ძ: 'dz',\n    წ: 'ts',\n    ჭ: 'ch',\n    ხ: 'kh',\n    ჯ: 'j',\n    ჰ: 'h',\n    // hebrew\n    ב: 'v',\n    גּ: 'g',\n    ג: 'g',\n    ד: 'd',\n    דּ: 'd',\n    ה: 'h',\n    ו: 'v',\n    ז: 'z',\n    ח: 'h',\n    ט: 't',\n    י: 'y',\n    כ: 'kh',\n    ך: 'kh',\n    ל: 'l',\n    מ: 'm',\n    ם: 'm',\n    נ: 'n',\n    ן: 'n',\n    ס: 's',\n    פ: 'f',\n    ף: 'f',\n    ץ: 'ts',\n    צ: 'ts',\n    ק: 'k',\n    ר: 'r',\n    תּ: 't',\n    ת: 't'\n  };\n  slug.charmap = Object.assign({}, initialCharmap);\n  slug.multicharmap = Object.assign({}, initialMulticharmap);\n  slug.defaults = {\n    charmap: slug.charmap,\n    mode: 'pretty',\n    modes: {\n      rfc3986: {\n        replacement: '-',\n        remove: null,\n        lower: true,\n        charmap: slug.charmap,\n        multicharmap: slug.multicharmap\n      },\n      pretty: {\n        replacement: '-',\n        remove: null,\n        lower: true,\n        charmap: slug.charmap,\n        multicharmap: slug.multicharmap\n      }\n    },\n    multicharmap: slug.multicharmap\n  };\n\n  slug.reset = function () {\n    slug.defaults.modes.rfc3986.charmap = slug.defaults.modes.pretty.charmap = slug.charmap = slug.defaults.charmap = Object.assign({}, initialCharmap);\n    slug.defaults.modes.rfc3986.multicharmap = slug.defaults.modes.pretty.multicharmap = slug.multicharmap = slug.defaults.multicharmap = Object.assign({}, initialMulticharmap);\n  };\n\n  slug.extend = function (customMap) {\n    Object.assign(slug.charmap, customMap);\n  };\n  /* global define */\n  // Be compatible with different module systems\n\n\n  if (typeof define !== 'undefined' && define.amd) {\n    // AMD\n    define([], function () {\n      return slug;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    // CommonJS\n    module.exports = slug;\n  } else {\n    // Script tag\n    root.slug = slug;\n  }\n})(this);","map":{"version":3,"sources":["/home/tuyennguyen/KLTN/CLIEN/node_modules/slug/slug.js"],"names":["root","base64","getWholeCharAndI","str","i","code","charCodeAt","isNaN","RangeError","charAt","length","next","prev","Error","window","btoa","input","unescape","encodeURIComponent","output","block","charCode","idx","map","Buffer","from","toString","Object","assign","defineProperty","value","target","varArgs","undefined","TypeError","to","index","arguments","nextSource","nextKey","prototype","hasOwnProperty","call","writable","configurable","slug","string","opts","result","slugify","charAndI","locales","bg","Й","й","X","x","Ц","ц","Щ","щ","Ъ","ъ","Ь","ь","de","Ä","ä","Ö","ö","Ü","ü","sr","đ","Đ","replacement","mode","defaults","modes","keys","key","l","localeMap","locale","lengths","multicharmap","len","indexOf","push","sort","a","b","char","matchedMultichar","j","substr","charmap","replace","allowedChars","remove","trim","lower","toLowerCase","initialMulticharmap","फ़","ग़","ख़","क़","ड़","ढ़","य़","ज़","בִי","בֵ","בֵי","בֶ","בַ","בָ","בֹ","וֹ","בֻ","וּ","בּ","כּ","ךּ","פּ","שׁ","שׂ","בְ","חֱ","חֲ","חֳ","בִ","initialCharmap","À","Á","Â","Ã","Å","Æ","Ç","È","É","Ê","Ë","Ì","Í","Î","Ï","Ð","Ñ","Ò","Ó","Ô","Õ","Ő","Ø","Ō","Ù","Ú","Û","Ű","Ý","Þ","ß","à","á","â","ã","å","æ","ç","è","é","ê","ë","ì","í","î","ï","ð","ñ","ò","ó","ô","õ","ő","ø","ō","Œ","œ","ù","ú","û","ű","ý","þ","ÿ","ẞ","α","β","γ","δ","ε","ζ","η","θ","ι","κ","λ","μ","ν","ξ","ο","π","ρ","σ","τ","υ","φ","χ","ψ","ω","ά","έ","ί","ό","ύ","ή","ώ","ς","ϊ","ΰ","ϋ","ΐ","Α","Β","Γ","Δ","Ε","Ζ","Η","Θ","Ι","Κ","Λ","Μ","Ν","Ξ","Ο","Π","Ρ","Σ","Τ","Υ","Φ","Χ","Ψ","Ω","Ά","Έ","Ί","Ό","Ύ","Ή","Ώ","Ϊ","Ϋ","ş","Ş","ı","İ","ğ","Ğ","а","б","в","г","д","е","ё","ж","з","и","к","л","м","н","о","п","р","с","т","у","ф","х","ч","ш","ы","э","ю","я","А","Б","В","Г","Д","Е","Ё","Ж","З","И","К","Л","М","Н","О","П","Р","С","Т","У","Ф","Х","Ч","Ш","Ы","Э","Ю","Я","Є","І","Ї","Ґ","є","і","ї","ґ","č","ď","ě","ň","ř","š","ť","ů","ž","Č","Ď","Ě","Ň","Ř","Š","Ť","Ů","Ž","ľ","ĺ","ŕ","Ľ","Ĺ","Ŕ","ą","ć","ę","ł","ń","ś","ź","ż","Ą","Ć","Ę","Ł","Ń","Ś","Ź","Ż","ā","ē","ģ","ī","ķ","ļ","ņ","ū","Ā","Ē","Ģ","Ī","Ķ","Ļ","Ņ","Ū","أ","ب","ت","ث","ج","ح","خ","د","ذ","ر","ز","س","ش","ص","ض","ط","ظ","ع","غ","ف","ق","ك","ل","م","ن","ه","و","ي","ء","ة","آ","ا","پ","ژ","گ","چ","ک","ی","ė","į","ų","Ė","Į","Ų","ț","Ț","ţ","Ţ","ș","Ș","ă","Ă","Ạ","Ả","Ầ","Ấ","Ậ","Ẩ","Ẫ","Ằ","Ắ","Ặ","Ẳ","Ẵ","Ẹ","Ẻ","Ẽ","Ề","Ế","Ệ","Ể","Ễ","Ị","Ỉ","Ĩ","Ọ","Ỏ","Ồ","Ố","Ộ","Ổ","Ỗ","Ơ","Ờ","Ớ","Ợ","Ở","Ỡ","Ụ","Ủ","Ũ","Ư","Ừ","Ứ","Ự","Ử","Ữ","Ỳ","Ỵ","Ỷ","Ỹ","ạ","ả","ầ","ấ","ậ","ẩ","ẫ","ằ","ắ","ặ","ẳ","ẵ","ẹ","ẻ","ẽ","ề","ế","ệ","ể","ễ","ị","ỉ","ĩ","ọ","ỏ","ồ","ố","ộ","ổ","ỗ","ơ","ờ","ớ","ợ","ở","ỡ","ụ","ủ","ũ","ư","ừ","ứ","ự","ử","ữ","ỳ","ỵ","ỷ","ỹ","Ә","ә","Ғ","ғ","Қ","қ","Ң","ң","Ү","ү","Ұ","ұ","Һ","һ","Ө","ө","ђ","ј","љ","њ","ћ","џ","Ђ","Ј","Љ","Њ","Ћ","Џ","ǌ","ǉ","ǋ","ǈ","अ","आ","ए","ई","ऍ","ऎ","ऐ","इ","ओ","ऑ","ऒ","ऊ","औ","उ","ब","भ","च","छ","ड","ढ","फ","ग","घ","ह","ज","झ","क","ख","ल","ळ","ऌ","ऴ","ॡ","म","न","ङ","ञ","ण","ऩ","ॐ","प","र","ऋ","ॠ","ऱ","स","श","ष","ट","त","ठ","द","थ","ध","व","य","ə","Ə","ა","ბ","გ","დ","ე","ვ","ზ","თ","ი","კ","ლ","მ","ნ","ო","პ","ჟ","რ","ს","ტ","უ","ფ","ქ","ღ","ყ","შ","ჩ","ც","ძ","წ","ჭ","ხ","ჯ","ჰ","ב","גּ","ג","ד","דּ","ה","ו","ז","ח","ט","י","כ","ך","ל","מ","ם","נ","ן","ס","פ","ף","ץ","צ","ק","ר","תּ","ת","rfc3986","pretty","reset","extend","customMap","define","amd","module","exports"],"mappings":"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","sourcesContent":["/* global btoa */\n(function (root) {\n  let base64\n\n  // This function's sole purpose is to help us ignore lone surrogates so that\n  // malformed strings don't throw in the browser while being processed\n  // permissively in Node.js. If we didn't care about parity, we could get rid\n  // of it.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n  function getWholeCharAndI (str, i) {\n    const code = str.charCodeAt(i)\n\n    // This is a coherence check. `code` should never be `NaN`.\n    /* istanbul ignore if */\n    if (isNaN(code)) {\n      throw new RangeError('Index ' + i + ' out of range for string \"' + str + '\"; please open an issue at https://github.com/Trott/slug/issues/new')\n    }\n    if (code < 0xD800 || code > 0xDFFF) {\n      return [str.charAt(i), i] // Non-surrogate character, keeping 'i' the same\n    }\n\n    // High surrogate\n    if (code >= 0xD800 && code <= 0xDBFF) {\n      if (str.length <= (i + 1)) {\n        // High surrogate without following low surrogate\n        return [' ', i]\n      }\n      const next = str.charCodeAt(i + 1)\n      if (next < 0xDC00 || next > 0xDFFF) {\n        // High surrogate without following low surrogate\n        return [' ', i]\n      }\n      return [str.charAt(i) + str.charAt(i + 1), i + 1]\n    }\n\n    // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n    if (i === 0) {\n      // Low surrogate without preceding high surrogate\n      return [' ', i]\n    }\n\n    const prev = str.charCodeAt(i - 1)\n\n    /* istanbul ignore else */\n    if (prev < 0xD800 || prev > 0xDBFF) {\n      // Low surrogate without preceding high surrogate\n      return [' ', i]\n    }\n\n    /* istanbul ignore next */\n    throw new Error('String \"' + str + '\" reaches code believed to be unreachable; please open an issue at https://github.com/Trott/slug/issues/new')\n  }\n\n  if (typeof window !== 'undefined') {\n    if (window.btoa) {\n      base64 = function (input) {\n        return btoa(unescape(encodeURIComponent(input)))\n      }\n    } else {\n      // Polyfill for environments that don't have btoa or Buffer class (notably, React Native).\n      // Based on https://github.com/davidchambers/Base64.js/blob/a121f75bb10c8dd5d557886c4b1069b31258d230/base64.js\n      base64 = function (input) {\n        const str = unescape(encodeURIComponent(input + ''))\n        let output = ''\n        for (\n          let block, charCode, idx = 0, map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n          str.charAt(idx | 0) || (map = '=', idx % 1);\n          output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n        ) {\n          charCode = str.charCodeAt(idx += 3 / 4)\n          // TODO: The if condition may be guaranteed to be false. Verify and\n          // remove or otherwise write a test to cover it.\n          /* istanbul ignore if */\n          if (charCode > 0xFF) {\n            throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\")\n          }\n          block = block << 8 | charCode\n        }\n        return output\n      }\n    }\n  } else {\n    base64 = function (input) {\n      return Buffer.from(input).toString('base64')\n    }\n  }\n\n  // IE11 doesn't have Object.assign(), hence this MDN-supplied polyfill.\n  /* istanbul ignore if */\n  if (typeof Object.assign !== 'function') {\n    // Must be writable: true, enumerable: false, configurable: true\n    Object.defineProperty(Object, 'assign', {\n      value: function assign (target, varArgs) { // .length of function is 2\n        'use strict'\n        if (target === null || target === undefined) {\n          throw new TypeError('Cannot convert undefined or null to object')\n        }\n\n        const to = Object(target)\n\n        for (let index = 1; index < arguments.length; index++) {\n          const nextSource = arguments[index]\n\n          if (nextSource !== null && nextSource !== undefined) {\n            // eslint-disable-next-line no-var\n            for (var nextKey in nextSource) {\n              // Avoid bugs when hasOwnProperty is shadowed\n              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                to[nextKey] = nextSource[nextKey]\n              }\n            }\n          }\n        }\n        return to\n      },\n      writable: true,\n      configurable: true\n    })\n  }\n\n  function slug (string, opts) {\n    let result = slugify(string, opts)\n    // If output is an empty string, try slug for base64 of string.\n    if (result === '') {\n      // Get rid of lone surrogates.\n      let input = ''\n      for (let i = 0; i < string.length; i++) {\n        const charAndI = getWholeCharAndI(string, i)\n        i = charAndI[1]\n        input += charAndI[0]\n      }\n      result = slugify(base64(input), opts)\n    }\n    return result\n  }\n\n  const locales = {\n    // http://www.eki.ee/wgrs/rom1_bg.pdf\n    bg: { Й: 'Y', й: 'y', X: 'H', x: 'h', Ц: 'Ts', ц: 'ts', Щ: 'Sht', щ: 'sht', Ъ: 'A', ъ: 'a', Ь: 'Y', ь: 'y' },\n    // Need a reference URL for German, although this is pretty well-known.\n    de: { Ä: 'AE', ä: 'ae', Ö: 'OE', ö: 'oe', Ü: 'UE', ü: 'ue' },\n    // Need a reference URL for Serbian.\n    sr: { đ: 'dj', Đ: 'DJ' }\n  }\n\n  function slugify (string, opts) {\n    if (typeof string !== 'string') {\n      throw new Error('slug() requires a string argument, received ' + typeof string)\n    }\n    if (typeof opts === 'string') { opts = { replacement: opts } }\n    opts = opts ? Object.assign({}, opts) : {}\n    opts.mode = opts.mode || slug.defaults.mode\n    const defaults = slug.defaults.modes[opts.mode]\n    const keys = ['replacement', 'multicharmap', 'charmap', 'remove', 'lower']\n    for (let key, i = 0, l = keys.length; i < l; i++) {\n      key = keys[i]\n      opts[key] = (key in opts) ? opts[key] : defaults[key]\n    }\n    const localeMap = locales[opts.locale] || {}\n\n    let lengths = []\n    // \"let\" instead of \"const\" in next line is for IE11 compatibilty\n    for (let key in opts.multicharmap) { // eslint-disable-line prefer-const\n      if (!Object.prototype.hasOwnProperty.call(opts.multicharmap, key)) { continue }\n\n      const len = key.length\n      if (lengths.indexOf(len) === -1) { lengths.push(len) }\n    }\n\n    // We want to match the longest string if there are multiple matches, so\n    // sort lengths in descending order.\n    lengths = lengths.sort(function (a, b) { return b - a })\n\n    let result = ''\n    for (let char, i = 0, l = string.length; i < l; i++) {\n      char = string[i]\n      let matchedMultichar = false\n      for (let j = 0; j < lengths.length; j++) {\n        const len = lengths[j]\n        const str = string.substr(i, len)\n        if (opts.multicharmap[str]) {\n          i += len - 1\n          char = opts.multicharmap[str]\n          matchedMultichar = true\n          break\n        }\n      }\n      if (!matchedMultichar) {\n        if (localeMap[char]) {\n          char = localeMap[char]\n        } else if (opts.charmap[char]) {\n          char = opts.charmap[char]\n        }\n      }\n      // next line preserves the replacement character in case it is included in allowedChars\n      char = char.replace(opts.replacement, ' ')\n      result += char\n    }\n    const allowedChars = opts.mode === 'rfc3986' ? /[^\\w\\s\\-.~]/g : /[^A-Za-z0-9\\s]/g\n    result = result.replace(allowedChars, '') // allowed\n    if (opts.remove) {\n      result = result.replace(opts.remove, '')\n    }\n    result = result.trim()\n    result = result.replace(/[-\\s]+/g, opts.replacement) // convert spaces\n    result = result.replace(opts.replacement + '$', '') // remove trailing separator\n    if (opts.lower) {\n      result = result.toLowerCase()\n    }\n    return result\n  }\n\n  const initialMulticharmap = {\n    // multibyte devanagari characters (hindi, sanskrit, etc.)\n    फ़: 'Fi',\n    ग़: 'Ghi',\n    ख़: 'Khi',\n    क़: 'Qi',\n    ड़: 'ugDha',\n    ढ़: 'ugDhha',\n    य़: 'Yi',\n    ज़: 'Za',\n    // hebrew\n    // Refs: http://www.eki.ee/wgrs/rom1_he.pdf\n    // Refs: https://en.wikipedia.org/wiki/Niqqud\n    בִי: 'i',\n    בֵ: 'e',\n    בֵי: 'e',\n    בֶ: 'e',\n    בַ: 'a',\n    בָ: 'a',\n    בֹ: 'o',\n    וֹ: 'o',\n    בֻ: 'u',\n    וּ: 'u',\n    בּ: 'b',\n    כּ: 'k',\n    ךּ: 'k',\n    פּ: 'p',\n    שׁ: 'sh',\n    שׂ: 's',\n    בְ: 'e',\n    חֱ: 'e',\n    חֲ: 'a',\n    חֳ: 'o',\n    בִ: 'i'\n  }\n\n  // https://github.com/django/django/blob/master/django/contrib/admin/static/admin/js/urlify.js\n  const initialCharmap = {\n    // latin\n    À: 'A',\n    Á: 'A',\n    Â: 'A',\n    Ã: 'A',\n    Ä: 'A',\n    Å: 'A',\n    Æ: 'AE',\n    Ç: 'C',\n    È: 'E',\n    É: 'E',\n    Ê: 'E',\n    Ë: 'E',\n    Ì: 'I',\n    Í: 'I',\n    Î: 'I',\n    Ï: 'I',\n    Ð: 'D',\n    Ñ: 'N',\n    Ò: 'O',\n    Ó: 'O',\n    Ô: 'O',\n    Õ: 'O',\n    Ö: 'O',\n    Ő: 'O',\n    Ø: 'O',\n    Ō: 'O',\n    Ù: 'U',\n    Ú: 'U',\n    Û: 'U',\n    Ü: 'U',\n    Ű: 'U',\n    Ý: 'Y',\n    Þ: 'TH',\n    ß: 'ss',\n    à: 'a',\n    á: 'a',\n    â: 'a',\n    ã: 'a',\n    ä: 'a',\n    å: 'a',\n    æ: 'ae',\n    ç: 'c',\n    è: 'e',\n    é: 'e',\n    ê: 'e',\n    ë: 'e',\n    ì: 'i',\n    í: 'i',\n    î: 'i',\n    ï: 'i',\n    ð: 'd',\n    ñ: 'n',\n    ò: 'o',\n    ó: 'o',\n    ô: 'o',\n    õ: 'o',\n    ö: 'o',\n    ő: 'o',\n    ø: 'o',\n    ō: 'o',\n    Œ: 'OE',\n    œ: 'oe',\n    ù: 'u',\n    ú: 'u',\n    û: 'u',\n    ü: 'u',\n    ű: 'u',\n    ý: 'y',\n    þ: 'th',\n    ÿ: 'y',\n    ẞ: 'SS',\n    // greek\n    α: 'a',\n    β: 'b',\n    γ: 'g',\n    δ: 'd',\n    ε: 'e',\n    ζ: 'z',\n    η: 'h',\n    θ: '8',\n    ι: 'i',\n    κ: 'k',\n    λ: 'l',\n    μ: 'm',\n    ν: 'n',\n    ξ: '3',\n    ο: 'o',\n    π: 'p',\n    ρ: 'r',\n    σ: 's',\n    τ: 't',\n    υ: 'y',\n    φ: 'f',\n    χ: 'x',\n    ψ: 'ps',\n    ω: 'w',\n    ά: 'a',\n    έ: 'e',\n    ί: 'i',\n    ό: 'o',\n    ύ: 'y',\n    ή: 'h',\n    ώ: 'w',\n    ς: 's',\n    ϊ: 'i',\n    ΰ: 'y',\n    ϋ: 'y',\n    ΐ: 'i',\n    Α: 'A',\n    Β: 'B',\n    Γ: 'G',\n    Δ: 'D',\n    Ε: 'E',\n    Ζ: 'Z',\n    Η: 'H',\n    Θ: '8',\n    Ι: 'I',\n    Κ: 'K',\n    Λ: 'L',\n    Μ: 'M',\n    Ν: 'N',\n    Ξ: '3',\n    Ο: 'O',\n    Π: 'P',\n    Ρ: 'R',\n    Σ: 'S',\n    Τ: 'T',\n    Υ: 'Y',\n    Φ: 'F',\n    Χ: 'X',\n    Ψ: 'PS',\n    Ω: 'W',\n    Ά: 'A',\n    Έ: 'E',\n    Ί: 'I',\n    Ό: 'O',\n    Ύ: 'Y',\n    Ή: 'H',\n    Ώ: 'W',\n    Ϊ: 'I',\n    Ϋ: 'Y',\n    // turkish\n    ş: 's',\n    Ş: 'S',\n    ı: 'i',\n    İ: 'I',\n    ğ: 'g',\n    Ğ: 'G',\n    // russian\n    а: 'a',\n    б: 'b',\n    в: 'v',\n    г: 'g',\n    д: 'd',\n    е: 'e',\n    ё: 'yo',\n    ж: 'zh',\n    з: 'z',\n    и: 'i',\n    й: 'j',\n    к: 'k',\n    л: 'l',\n    м: 'm',\n    н: 'n',\n    о: 'o',\n    п: 'p',\n    р: 'r',\n    с: 's',\n    т: 't',\n    у: 'u',\n    ф: 'f',\n    х: 'h',\n    ц: 'c',\n    ч: 'ch',\n    ш: 'sh',\n    щ: 'sh',\n    ъ: 'u',\n    ы: 'y',\n    ь: '',\n    э: 'e',\n    ю: 'yu',\n    я: 'ya',\n    А: 'A',\n    Б: 'B',\n    В: 'V',\n    Г: 'G',\n    Д: 'D',\n    Е: 'E',\n    Ё: 'Yo',\n    Ж: 'Zh',\n    З: 'Z',\n    И: 'I',\n    Й: 'J',\n    К: 'K',\n    Л: 'L',\n    М: 'M',\n    Н: 'N',\n    О: 'O',\n    П: 'P',\n    Р: 'R',\n    С: 'S',\n    Т: 'T',\n    У: 'U',\n    Ф: 'F',\n    Х: 'H',\n    Ц: 'C',\n    Ч: 'Ch',\n    Ш: 'Sh',\n    Щ: 'Sh',\n    Ъ: 'U',\n    Ы: 'Y',\n    Ь: '',\n    Э: 'E',\n    Ю: 'Yu',\n    Я: 'Ya',\n    // ukranian\n    Є: 'Ye',\n    І: 'I',\n    Ї: 'Yi',\n    Ґ: 'G',\n    є: 'ye',\n    і: 'i',\n    ї: 'yi',\n    ґ: 'g',\n    // czech\n    č: 'c',\n    ď: 'd',\n    ě: 'e',\n    ň: 'n',\n    ř: 'r',\n    š: 's',\n    ť: 't',\n    ů: 'u',\n    ž: 'z',\n    Č: 'C',\n    Ď: 'D',\n    Ě: 'E',\n    Ň: 'N',\n    Ř: 'R',\n    Š: 'S',\n    Ť: 'T',\n    Ů: 'U',\n    Ž: 'Z',\n    // slovak\n    ľ: 'l',\n    ĺ: 'l',\n    ŕ: 'r',\n    Ľ: 'L',\n    Ĺ: 'L',\n    Ŕ: 'R',\n    // polish\n    ą: 'a',\n    ć: 'c',\n    ę: 'e',\n    ł: 'l',\n    ń: 'n',\n    ś: 's',\n    ź: 'z',\n    ż: 'z',\n    Ą: 'A',\n    Ć: 'C',\n    Ę: 'E',\n    Ł: 'L',\n    Ń: 'N',\n    Ś: 'S',\n    Ź: 'Z',\n    Ż: 'Z',\n    // latvian\n    ā: 'a',\n    ē: 'e',\n    ģ: 'g',\n    ī: 'i',\n    ķ: 'k',\n    ļ: 'l',\n    ņ: 'n',\n    ū: 'u',\n    Ā: 'A',\n    Ē: 'E',\n    Ģ: 'G',\n    Ī: 'I',\n    Ķ: 'K',\n    Ļ: 'L',\n    Ņ: 'N',\n    Ū: 'U',\n    // arabic\n    أ: 'a',\n    ب: 'b',\n    ت: 't',\n    ث: 'th',\n    ج: 'g',\n    ح: 'h',\n    خ: 'kh',\n    د: 'd',\n    ذ: 'th',\n    ر: 'r',\n    ز: 'z',\n    س: 's',\n    ش: 'sh',\n    ص: 's',\n    ض: 'd',\n    ط: 't',\n    ظ: 'th',\n    ع: 'aa',\n    غ: 'gh',\n    ف: 'f',\n    ق: 'k',\n    ك: 'k',\n    ل: 'l',\n    م: 'm',\n    ن: 'n',\n    ه: 'h',\n    و: 'o',\n    ي: 'y',\n    ء: 'aa',\n    ة: 'a',\n    // farsi\n    آ: 'a',\n    ا: 'a',\n    پ: 'p',\n    ژ: 'zh',\n    گ: 'g',\n    چ: 'ch',\n    ک: 'k',\n    ی: 'i',\n    // lithuanian\n    ė: 'e',\n    į: 'i',\n    ų: 'u',\n    Ė: 'E',\n    Į: 'I',\n    Ų: 'U',\n    // romanian\n    ț: 't',\n    Ț: 'T',\n    ţ: 't',\n    Ţ: 'T',\n    ș: 's',\n    Ș: 'S',\n    ă: 'a',\n    Ă: 'A',\n    // vietnamese\n    Ạ: 'A',\n    Ả: 'A',\n    Ầ: 'A',\n    Ấ: 'A',\n    Ậ: 'A',\n    Ẩ: 'A',\n    Ẫ: 'A',\n    Ằ: 'A',\n    Ắ: 'A',\n    Ặ: 'A',\n    Ẳ: 'A',\n    Ẵ: 'A',\n    Ẹ: 'E',\n    Ẻ: 'E',\n    Ẽ: 'E',\n    Ề: 'E',\n    Ế: 'E',\n    Ệ: 'E',\n    Ể: 'E',\n    Ễ: 'E',\n    Ị: 'I',\n    Ỉ: 'I',\n    Ĩ: 'I',\n    Ọ: 'O',\n    Ỏ: 'O',\n    Ồ: 'O',\n    Ố: 'O',\n    Ộ: 'O',\n    Ổ: 'O',\n    Ỗ: 'O',\n    Ơ: 'O',\n    Ờ: 'O',\n    Ớ: 'O',\n    Ợ: 'O',\n    Ở: 'O',\n    Ỡ: 'O',\n    Ụ: 'U',\n    Ủ: 'U',\n    Ũ: 'U',\n    Ư: 'U',\n    Ừ: 'U',\n    Ứ: 'U',\n    Ự: 'U',\n    Ử: 'U',\n    Ữ: 'U',\n    Ỳ: 'Y',\n    Ỵ: 'Y',\n    Ỷ: 'Y',\n    Ỹ: 'Y',\n    Đ: 'D',\n    ạ: 'a',\n    ả: 'a',\n    ầ: 'a',\n    ấ: 'a',\n    ậ: 'a',\n    ẩ: 'a',\n    ẫ: 'a',\n    ằ: 'a',\n    ắ: 'a',\n    ặ: 'a',\n    ẳ: 'a',\n    ẵ: 'a',\n    ẹ: 'e',\n    ẻ: 'e',\n    ẽ: 'e',\n    ề: 'e',\n    ế: 'e',\n    ệ: 'e',\n    ể: 'e',\n    ễ: 'e',\n    ị: 'i',\n    ỉ: 'i',\n    ĩ: 'i',\n    ọ: 'o',\n    ỏ: 'o',\n    ồ: 'o',\n    ố: 'o',\n    ộ: 'o',\n    ổ: 'o',\n    ỗ: 'o',\n    ơ: 'o',\n    ờ: 'o',\n    ớ: 'o',\n    ợ: 'o',\n    ở: 'o',\n    ỡ: 'o',\n    ụ: 'u',\n    ủ: 'u',\n    ũ: 'u',\n    ư: 'u',\n    ừ: 'u',\n    ứ: 'u',\n    ự: 'u',\n    ử: 'u',\n    ữ: 'u',\n    ỳ: 'y',\n    ỵ: 'y',\n    ỷ: 'y',\n    ỹ: 'y',\n    đ: 'd',\n    // kazakh\n    Ә: 'AE',\n    ә: 'ae',\n    Ғ: 'GH',\n    ғ: 'gh',\n    Қ: 'KH',\n    қ: 'kh',\n    Ң: 'NG',\n    ң: 'ng',\n    Ү: 'UE',\n    ү: 'ue',\n    Ұ: 'U',\n    ұ: 'u',\n    Һ: 'H',\n    һ: 'h',\n    Ө: 'OE',\n    ө: 'oe',\n    // serbian\n    ђ: 'dj',\n    ј: 'j',\n    љ: 'lj',\n    њ: 'nj',\n    ћ: 'c',\n    џ: 'dz',\n    Ђ: 'Dj',\n    Ј: 'j',\n    Љ: 'Lj',\n    Њ: 'Nj',\n    Ћ: 'C',\n    Џ: 'Dz',\n    ǌ: 'nj',\n    ǉ: 'lj',\n    ǋ: 'NJ',\n    ǈ: 'LJ',\n    // hindi\n    अ: 'a',\n    आ: 'aa',\n    ए: 'e',\n    ई: 'ii',\n    ऍ: 'ei',\n    ऎ: 'ae',\n    ऐ: 'ai',\n    इ: 'i',\n    ओ: 'o',\n    ऑ: 'oi',\n    ऒ: 'oii',\n    ऊ: 'uu',\n    औ: 'ou',\n    उ: 'u',\n    ब: 'B',\n    भ: 'Bha',\n    च: 'Ca',\n    छ: 'Chha',\n    ड: 'Da',\n    ढ: 'Dha',\n    फ: 'Fa',\n    ग: 'Ga',\n    घ: 'Gha',\n    ग़: 'Ghi',\n    ह: 'Ha',\n    ज: 'Ja',\n    झ: 'Jha',\n    क: 'Ka',\n    ख: 'Kha',\n    ख़: 'Khi',\n    ल: 'L',\n    ळ: 'Li',\n    ऌ: 'Li',\n    ऴ: 'Lii',\n    ॡ: 'Lii',\n    म: 'Ma',\n    न: 'Na',\n    ङ: 'Na',\n    ञ: 'Nia',\n    ण: 'Nae',\n    ऩ: 'Ni',\n    ॐ: 'oms',\n    प: 'Pa',\n    क़: 'Qi',\n    र: 'Ra',\n    ऋ: 'Ri',\n    ॠ: 'Ri',\n    ऱ: 'Ri',\n    स: 'Sa',\n    श: 'Sha',\n    ष: 'Shha',\n    ट: 'Ta',\n    त: 'Ta',\n    ठ: 'Tha',\n    द: 'Tha',\n    थ: 'Tha',\n    ध: 'Thha',\n    ड़: 'ugDha',\n    ढ़: 'ugDhha',\n    व: 'Va',\n    य: 'Ya',\n    य़: 'Yi',\n    ज़: 'Za',\n    // azerbaijani\n    ə: 'e',\n    Ə: 'E',\n    // georgian\n    ა: 'a',\n    ბ: 'b',\n    გ: 'g',\n    დ: 'd',\n    ე: 'e',\n    ვ: 'v',\n    ზ: 'z',\n    თ: 't',\n    ი: 'i',\n    კ: 'k',\n    ლ: 'l',\n    მ: 'm',\n    ნ: 'n',\n    ო: 'o',\n    პ: 'p',\n    ჟ: 'zh',\n    რ: 'r',\n    ს: 's',\n    ტ: 't',\n    უ: 'u',\n    ფ: 'p',\n    ქ: 'k',\n    ღ: 'gh',\n    ყ: 'q',\n    შ: 'sh',\n    ჩ: 'ch',\n    ც: 'ts',\n    ძ: 'dz',\n    წ: 'ts',\n    ჭ: 'ch',\n    ხ: 'kh',\n    ჯ: 'j',\n    ჰ: 'h',\n    // hebrew\n    ב: 'v',\n    גּ: 'g',\n    ג: 'g',\n    ד: 'd',\n    דּ: 'd',\n    ה: 'h',\n    ו: 'v',\n    ז: 'z',\n    ח: 'h',\n    ט: 't',\n    י: 'y',\n    כ: 'kh',\n    ך: 'kh',\n    ל: 'l',\n    מ: 'm',\n    ם: 'm',\n    נ: 'n',\n    ן: 'n',\n    ס: 's',\n    פ: 'f',\n    ף: 'f',\n    ץ: 'ts',\n    צ: 'ts',\n    ק: 'k',\n    ר: 'r',\n    תּ: 't',\n    ת: 't'\n  }\n\n  slug.charmap = Object.assign({}, initialCharmap)\n  slug.multicharmap = Object.assign({}, initialMulticharmap)\n  slug.defaults = {\n    charmap: slug.charmap,\n    mode: 'pretty',\n    modes: {\n      rfc3986: {\n        replacement: '-',\n        remove: null,\n        lower: true,\n        charmap: slug.charmap,\n        multicharmap: slug.multicharmap\n      },\n      pretty: {\n        replacement: '-',\n        remove: null,\n        lower: true,\n        charmap: slug.charmap,\n        multicharmap: slug.multicharmap\n      }\n    },\n    multicharmap: slug.multicharmap\n  }\n\n  slug.reset = function () {\n    slug.defaults.modes.rfc3986.charmap = slug.defaults.modes.pretty.charmap = slug.charmap = slug.defaults.charmap = Object.assign({}, initialCharmap)\n    slug.defaults.modes.rfc3986.multicharmap = slug.defaults.modes.pretty.multicharmap = slug.multicharmap = slug.defaults.multicharmap = Object.assign({}, initialMulticharmap)\n  }\n\n  slug.extend = function (customMap) {\n    Object.assign(slug.charmap, customMap)\n  }\n\n  /* global define */\n  // Be compatible with different module systems\n\n  if (typeof define !== 'undefined' && define.amd) { // AMD\n    define([], function () { return slug })\n  } else if (typeof module !== 'undefined' && module.exports) { // CommonJS\n    module.exports = slug\n  } else { // Script tag\n    root.slug = slug\n  }\n}(this))\n"]},"metadata":{},"sourceType":"script"}